#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "freertos/semphr.h"
#include "esp_system.h"
#include "esp_log.h"

#define NUM_AVIONES 5
#define NUM_PISTAS 3

// Estructura para solicitudes de aterrizaje
struct {
    int avion_id;
    SemaphoreHandle_t permiso;
} SolicitudAterrizaje;

SemaphoreHandle_t pistas_mutex[NUM_PISTAS];
QueueHandle_t cola_solicitudes;

static const char *TAG = "Aeropuerto";

// ---------------------------- Tarea de los aviones ----------------------------
void avion_task(void *params) {
    int id = (int)(intptr_t)params;
    SemaphoreHandle_t semaforo_permiso = xSemaphoreCreateBinary();

    while (1) {
        int tiempo_aproximacion = 1000 + esp_random() % 2000;
        vTaskDelay(pdMS_TO_TICKS(tiempo_aproximacion));

        ESP_LOGI(TAG, "Avión %d solicita aterrizar", id);

        SolicitudAterrizaje solicitud = {
        .avion_id = id,
        .permiso = semaforo_permiso
        };
        xQueueSend(cola_solicitudes, &solicitud, portMAX_DELAY);

        // Esperar permiso de la torre
        xSemaphoreTake(semaforo_permiso, portMAX_DELAY);
        ESP_LOGI(TAG, "Avión %d recibió permiso de torre de control", id);

        // Buscar pista libre
        for (int i = 0; i < NUM_PISTAS; ++i) {
            if (xSemaphoreTake(pistas_mutex[i], portMAX_DELAY)) {
                ESP_LOGI(TAG, "Avión %d aterrizando en pista %d", id, i);
                int tiempo_aterrizaje = 2000 + esp_random() % 2000;
                vTaskDelay(pdMS_TO_TICKS(tiempo_aterrizaje));
                ESP_LOGI(TAG, "Avión %d libera pista %d", id, i);
                xSemaphoreGive(pistas_mutex[i]);
                break;
            }
        }
    }
}

// ---------------------------- Torre de control ----------------------------
void torre_control_task(void *params) {
    SolicitudAterrizaje solicitud;

    while (1) {
        if (xQueueReceive(cola_solicitudes, &solicitud, portMAX_DELAY)) {
            ESP_LOGI(TAG, "Torre autoriza aterrizaje a avión %d", solicitud.avion_id);
            xSemaphoreGive(solicitud.permiso);
        }
    }
}

// ---------------------------- Configuración inicial ----------------------------
void app_main(void) {
    // Inicialización
    cola_solicitudes = xQueueCreate(10, sizeof(SolicitudAterrizaje));
    for (int i = 0; i < NUM_PISTAS; ++i) {
        pistas_mutex[i] = xSemaphoreCreateMutex();
    }

    // Crear tarea de torre en Core 1
    xTaskCreatePinnedToCore(torre_control_task, "Torre Control", 4096, NULL, 2, NULL, 1);

    // Crear tareas de aviones en Core 0
    for (int i = 0; i < NUM_AVIONES; ++i) {
        char nombre[16];
        snprintf(nombre, sizeof(nombre), "Avion %d", i);
        xTaskCreatePinnedToCore(avion_task, nombre, 4096, (void*)(intptr_t)i, 1, NULL, 0);
    }
}
